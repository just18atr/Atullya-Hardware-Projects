`timescale 1ns / 1ps

module elevator(      //declaring inputs and output
    input [1:0] call,
    input [1:0] go,
    input clk,
    output reg [1:0] floor
    );
    
   reg [3:0] temp, state, nextstate;    // internal registers
   parameter s0 = 2'd0, s1 = 2'd1, s2 = 2'd2, s3 = 2'd3;
   
   initial
     begin
      floor <= 2'd0;   //initiating the elevator at ground floor
      temp <= 4'd0;
     end
  
   always@(call, go)
   begin
     case ({call,go})           // decoding every possible set of inputs
       4'b0000: temp <= 4'b0000;
       4'b0001: temp <= 4'b0001;
       4'b0010: temp <= 4'b0100;
       4'b0011: temp <= 4'b1000;
       
       4'b0100: temp <= 4'b0010;
       4'b0101: temp <= 4'b0010;
       4'b0110: temp <= 4'b0110;
       4'b0111: temp <= 4'b1010;
       
       4'b1000: temp <= 4'b0100;
       4'b1001: temp <= 4'b0110;
       4'b1010: temp <= 4'b0100;
       4'b1011: temp <= 4'b1100;
       
       4'b1100: temp <= 4'b1000;
       4'b1101: temp <= 4'b1001;
       4'b1110: temp <= 4'b1100;
       4'b1111: temp <= 4'b1000;
       
       default: temp <= 4'd0;
     endcase
   end 
   
  always@(posedge clk)
   begin
     case (state)   //defining the path of the elevator
       s0: begin
          case(temp)   // temp is register which decides the state change of the elevator
            4'b0000: nextstate <= s0;
            4'b0010: nextstate <= s1;
            4'b0100: nextstate <= s2; 
            4'b0110: nextstate <= s1;
            4'b1000: nextstate <= s3;
            4'b1010: nextstate <= s1;
            4'b1100: nextstate <= s2;
            4'b1110: nextstate <= s1;
            default: nextstate <= s0;
           endcase 
          end 
       s1: begin
          case(temp) 
            4'b0000: nextstate <= s0;
            4'b0001: nextstate <= s0;
            4'b0100: nextstate <= s2; 
            4'b0101: nextstate <= s2;
            4'b1000: nextstate <= s3;
            4'b1001: nextstate <= s3;
            4'b1100: nextstate <= s2;
            4'b1101: nextstate <= s2;
            default: nextstate <= s0;   
            endcase
           end 
       s2: begin
          case(temp) 
            4'b0000: nextstate <= s0;
            4'b0001: nextstate <= s0;
            4'b0010: nextstate <= s1; 
            4'b0011: nextstate <= s1;
            4'b1000: nextstate <= s3;
            4'b1001: nextstate <= s3;
            4'b1010: nextstate <= s3;
            4'b1011: nextstate <= s3;
            default: nextstate <= s0;        
           endcase 
         end
       s3: begin
          case(temp) 
            4'b0000: nextstate <= s0;
            4'b0001: nextstate <= s0;
            4'b0010: nextstate <= s1; 
            4'b0011: nextstate <= s1;
            4'b0100: nextstate <= s2;
            4'b0101: nextstate <= s2;
            4'b1100: nextstate <= s2;
            4'b0111: nextstate <= s2;
            default: nextstate <= s0;  
          endcase 
         end  
       default: nextstate <= s0;    
     endcase 
     state <= nextstate;
   end
   
   always@(state)   
    begin
      case (state)   //defining what functions need to be done at each floor
       s0: begin
          floor <= 2'd0;
          temp[0] <= 1'b0;
         end
       s1: begin
          floor <= 2'd1;
          temp[1] <= 1'b0; 
         end
       s2: begin
          floor <= 2'd2;
          temp[2] <= 1'b0;
         end
       s3: begin
          floor <= 2'd3;
          temp[3] <= 1'b0;
         end  
       default: begin
          floor <= 2'd0;
          temp <= 4'd0;
          end   
      endcase
    end
endmodule